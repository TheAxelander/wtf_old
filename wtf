#!/bin/bash
#===============================================================================
# HEADER
#===============================================================================
#% SYNOPSIS
#+    ${SCRIPT_NAME} [<Options>] <Command>
#%
#% DESCRIPTION
#%    Display custom help text depending on your command input.
#%
#% OPTIONS
#%    -h,          Print script help
#%    -t,          Run script in Dev mode (use files from current directory)
#%    -u,          Update help files
#%    -v,          Print script information
#%
#% EXAMPLES
#%    ${SCRIPT_NAME} docker
#%
#===============================================================================
#- IMPLEMENTATION
#-    version         ${SCRIPT_NAME} 1.0.0
#-    author          Alexander Preibisch
#-    license         MIT License
#-
#===============================================================================
# END_OF_HEADER
#===============================================================================

# --- Header variables ---------------------------------------------------------
SCRIPT_HEADSIZE=$(head -200 ${0} | grep -n "^# END_OF_HEADER" | cut -f1 -d:)
SCRIPT_NAME="$(basename ${0})"

# --- Script variables ---------------------------------------------------------
FILES_PATH="$HOME/.local/wtf/files"

# --- Usage functions ----------------------------------------------------------
usage() { 
  printf "Usage: "
  scriptinfo usg 
}

usagefull() { 
  scriptinfo ful
}

scriptinfo() { 
  if [[ "$1" = "usg" ]]; then
    headFilter="^#+"
  elif [[ "$1" = "ful" ]]; then
    headFilter="^#[%+]"
  elif [[ "$1" = "ver" ]]; then
    headFilter="^#-"
  else
    headFilter="^#-"
  fi
  head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "${headFilter}" | sed -e "s/${headFilter}//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g"
}
 
# --- Option processing --------------------------------------------------------
sync_script_file() {
  echo "Sync wtf script to /usr/local/bin"
  if [[ $EUID > 0 ]] ; then
    sudo rsync -a ~/.local/wtf/wtf /usr/local/bin/wtf
  else
    rsync -a ~/.local/wtf/wtf /usr/local/bin/wtf
  fi
}

update() {
  echo "Update Git repository in ~/.local/wtf"
  git -C ~/.local/wtf pull 

  sync_script_file
}

if [[ $# == 0 ]] ; then
    usagefull
    exit 1;
fi

while getopts ":vhtu" optname
  do
    case "$optname" in
      "v")
        scriptinfo
        exit 0;
        ;;
      "h")
        usagefull
        exit 0;
        ;;
      "t")
        FILES_PATH="./files"
        ;;
      "u")
        update
        exit 0;
        ;;
      "?")
        echo "Unknown option $OPTARG"
        exit 0;
        ;;
      ":")
        echo "No argument value for option $OPTARG"
        exit 0;
        ;;
      *)
        echo "Unknown error while processing options"
        exit 0;
        ;;
    esac
  done

# Remove all options that have been parsed by getopts from parameters list
shift $(($OPTIND - 1))

#===============================================================================
# SCRIPT LOGIC
#===============================================================================

print_file() {
  echo -ne "$(<$FILES_PATH/$1.txt)" \\n
}

print_file $1
